// Export for User Flows (control shift e)

#import 'sandbox.js'
#import 'lib/constants.js'
#import 'lib/utils.js'

var homeFolder = "/Users/" + NSUserName()
new AppSandbox().authorize( homeFolder, init )

function init() {
    // Ask the user where they want to export to
    var openPanel = NSOpenPanel.openPanel()
    openPanel.setCanChooseDirectories(true)
    openPanel.setCanChooseFiles(false)
    openPanel.setCanCreateDirectories(true)
    openPanel.setTitle("Choose an folder to export to...")
    openPanel.setPrompt("Export")

    if (openPanel.runModal() == NSOKButton) {
        // Get the url of the folder the user selected
        var exportBaseUrl = openPanel.URL()

        // Create an object to store the JSON data in
        var jsonObject = {}
        var sectionsJson = {}

        // Loop through all the pages
        var pageLoop = doc.pages().objectEnumerator()
        while ( page = pageLoop.nextObject() ) {
            // Create an object to store the descriptions for each artboard in this page, using the page name as the key
            var section = parseName( page.name() );
            section.screens = {};

            // Switch to this pag to avoid errors when exporting
            doc.setCurrentPage( page )

            // Setup the URL for the page
            var pageDirectoryUrl = [exportBaseUrl URLByAppendingPathComponent:page.name() isDirectory:true]

            // Create the directory for this page to export to
            [[NSFileManager defaultManager] createDirectoryAtURL:pageDirectoryUrl withIntermediateDirectories:false attributes:null error:null]

            // Export each of this pages artboards to the page directory
            var artboardLoop = page.artboards().objectEnumerator()
            while ( artboard = artboardLoop.nextObject() ) {
                // Check that it's an artboard and not a slice
                if ( artboard.class() == MSArtboardGroup.class() ) {
                    // Export the artboard to the correct file location
                    var artboardPath = pageDirectoryUrl.URLByAppendingPathComponent( artboard.name() + fileExtension ).path()
                    [doc saveArtboardOrSlice:artboard toFile:artboardPath];

                    var screen = getArtboardData( artboard );

                    // Put the artboard description in the descriptions object
                    section.screens[ artboard.name() ] = screen;
                }
            }

            // Add section to JSON
            sectionsJson[ page.name() ] = section;
        }

        // Add the sections
        jsonObject[ sectionsJSONKey ] = sectionsJson;

        // Ask the user for the name of the project
        var projectName = [doc askForUserInput:"What is this project called?" initialValue:guessProjectName()]
        jsonObject[projectNameJSONKey] = new String(projectName)

        // Ask the user for the verson of the document
        var documentVersion = [doc askForUserInput:"What version of the document is this?" initialValue:guessDocumentVersion()]
        jsonObject[documentVersionJSONKey] = new String(documentVersion)

        // Convert the descrptions object to JSON
        var jsonString = JSON.stringify(jsonObject)
        print( jsonObject)
        var jsonData = @jsonString.dataUsingEncoding(NSUTF8StringEncoding))

        // Save the descriptions to a JSON file
        var metadataFilePath = exportBaseUrl.URLByAppendingPathComponent(metadataFilename).path()
        [[NSFileManager defaultManager] createFileAtPath:metadataFilePath contents:jsonData attributes:nil]
    }
}

function guessProjectName() {
    return getFilenameWithoutExtension().componentsSeparatedByString("_").firstObject()
}

function guessDocumentVersion() {
    return "Version " + getFilenameWithoutExtension().componentsSeparatedByString("_").lastObject()
}

function getFilenameWithoutExtension() {
    var filename = doc.fileURL().lastPathComponent()
    return [filename stringByReplacingOccurrencesOfString:".sketch" withString:""]
}

function getArtboardData( artboard ) {
    // Get the user flow description text layer, if there is one
    var artboardData = parseName( artboard.name() );

    // Parse title for status
    var title = artboardData.title;
    var statusMatch = /\[([\w\s]+)\]/.exec( title );
    if ( statusMatch ) {
        artboardData.status = statusMatch[ 1 ]
        artboardData.title = title.split( '[' )[ 0 ];
    }

    // Get description
    var possibleDescriptionLayer = getChildLayerByName(artboard, userFlowDescriptionLayerName)
    if (possibleDescriptionLayer) {
        artboardData.description = new String(possibleDescriptionLayer.stringValue())
    }

    return artboardData;
}

function parseName( name ) {
    var original = new String( name );
    var tag = name.split( " " )[ 0 ];
    var displayTag = tag.replace( /\_/g, '.' );

    var title = name.substringFromIndex( tag.length + 1 );
    var displayTitle = title.replace( /\_/g, ' ' );

    var data = {
        tag: displayTag,
        title: displayTitle,
        original: original
    };

    var firstCharacter = tag.charAt( 0 );
    if ( firstCharacter == "_" || firstCharacter == "-" ) {
        data.exclude = true;
    }

    return data;
}
