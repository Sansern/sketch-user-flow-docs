// Populate User Flows (command control p)

init()

function init() {
	var path = getExportsFolder()

	// Get descriptions from descriptions.json
	var pathToDescriptionsJson = path.URLByAppendingPathComponent('descriptions.json')
	var descriptions = [NSString stringWithContentsOfURL:pathToDescriptionsJson encoding:NSUTF8StringEncoding error:null]

	// Select first template page
	var templatePage = getFirstTemplatePage()

	// Get number of screens per page
	var numberOfScreensPerPage = getScreensPerPageFromTemplate(templatePage)

	// Populate cover
	populateCover()

	// Populate screens
	populateScreens(path, templatePage, numberOfScreensPerPage, descriptions)

	// Remove template
	removeTemplatePage()

	// Let it snow...
	finish()
}


// Ask user to select exports folder
function getExportsFolder() {
    var openPanel = NSOpenPanel.openPanel( )
    openPanel.setCanChooseDirectories(true)
    openPanel.setCanChooseFiles(false)
    openPanel.setCanCreateDirectories(false)

	openPanel.setTitle("Choose your exports folder")
    openPanel.setPrompt("Choose")
    if (openPanel.runModal() == NSOKButton) {
        return openPanel.URL()
    }
}

// Get screens per page from Template > Artboard > Screens group
function getScreensPerPageFromTemplate(templatePage) {
    var artboard = templatePage.artboards().firstObject()

	// Get Screens group
	var screens = getChildLayerByName(artboard, 'Screens')

    // Get number of children in Screens group
    return screens.layers().length()
}


// Get the 'Screens' group
function getTemplateScreens() {
    return getChildLayerByName(getFirstArtboard(), 'Screens')
}

function getFirstTemplatePage() {
	var pages = doc.pages()
	var pageLoop = pages.objectEnumerator()

    while (page = pageLoop.nextObject()) {
        if( page.name() == 'Template') {
            return page
        }
    }

    return false
}


// Populate screens
function populateScreens(path, templatePage, numberOfScreensPerPage, descriptions) {
	var fileManager = NSFileManager.defaultManager()
    var folders = fileManager.shallowSubpathsOfDirectoryAtURL(path)

	// Loop through folders
	var folderLoop = folders.objectEnumerator()
    while (folder = folderLoop.nextObject()) {
    	// Check if it's a folder and if shouldIgnoreItem should be ignored
    	if(!shouldIgnoreItem(folder) && folder.pathExtension() == "") {
			// Duplicate Templates page to start
			var pageCount = 0
			var page = duplicateTemplatePage(templatePage)

	    	// Get folder name (for page title)
	        var sectionName = folder.lastPathComponent()

	    	// Loop through files
	    	var files = fileManager.shallowSubpathsOfDirectoryAtURL(folder)
	    	var numberOfFilesInFolder = files.length()
	    	var screensInSectionCount = 0
			var screenCount = 0

			var fileLoop = files.objectEnumerator()
		    while (file = fileLoop.nextObject()) {

	            // Get filename and components
		        var filename = file.lastPathComponent().stringByDeletingPathExtension()
		        print(sectionName + ' - ' + filename)

		        if(shouldIgnoreItem(filename)) {
		        	// If we're not displaying a file, remove it from the numberOfFilesInFolder
		        	numberOfFilesInFolder--
		        } else {
		            var screenNumber = filename.componentsSeparatedByString(" ")[0]
		            var screenName = filename.substringFromIndex(screenNumber.length()+1)

			    	// Get correct screen group
					var templateScreens = getTemplateScreens()
					var screenGroup = templateScreens.layers().array()[screenCount]

			    	// Get image layer
			    	var imageLayer = getChildLayerByName(screenGroup, "Placeholder")

			    	// // Get image data
		            var data = fileManager.contentsAtPath(file)
		            var img = NSImage.alloc().initWithData(data)
		            var imageCollection = imageLayer.documentData().images()
		            var imageLayerName = imageLayer.name()

		            // Update imageLayer with image
		            var imageData = [imageCollection addImage:img convertColourspace:false]
		            imageLayer.image = imageData

		            // Update screen number
		            setTextOnChildLayerByName( screenGroup, "Number", screenNumber )

		            // Update heading text
		            setTextOnChildLayerByName( screenGroup, "Heading", screenName )

		            // Update description
	                var descriptionsJSON = JSON.parse(descriptions)
				    var description = descriptionsJSON[sectionName][filename]

				    if (typeof description != 'string') {
				    	description = ""
				    }
		            setTextOnChildLayerByName( screenGroup, "Description", description )

		            // If it's the first screen on a page, update page title
		            if (screenCount === 0) {
			            var header = getChildLayerByName(getFirstArtboard(), "Header")
			            setTextOnChildLayerByName(header, "Section name", sectionName)

		            	page.setName(sectionName)
			        }

			        // Update the screenCount
		            screenCount++
		            screensInSectionCount++
				}

	            // If we've run out of screens in this section, remove any unnecessary ones
				var haveRunOutOfScreensForSection = (screensInSectionCount == numberOfFilesInFolder)
	            if (haveRunOutOfScreensForSection) {
	            	// Work out how many slots left
					var slotsLeft = numberOfScreensPerPage - (screenCount % numberOfScreensPerPage)

					// Remove empty slots
		            var screens = getChildLayerByName(getFirstArtboard(), "Screens")
					for (var j=0; j<slotsLeft; j++) {
						screens.removeLayer(screens.lastLayer())
					}
	            }

	            // If we've run out of screens in this section OR we're on the third screen, duplicate the page and go through loop again
				var haveRunOutOfSlotsForPage = !(screenCount % numberOfScreensPerPage)
	            if (haveRunOutOfSlotsForPage) {
	            	// Update counts
	            	screenCount = 0
	            	pageCount++

	            	// Duplicate page
	            	page = duplicateTemplatePage(templatePage)
	            }
		    }
		}
    }
}

function shouldIgnoreItem(path) {
	return path.lastPathComponent().hasPrefix("_")
}

function duplicateTemplatePage(templatePage) {
    var newPage = templatePage.copy()

    var pages = doc.documentData().pages()
    [pages insertObject:newPage afterObject:doc.currentPage()]
    doc.setCurrentPage(newPage)

    return newPage
}

function populateCover() {
	print('populateCover')
}

function removeTemplatePage() {
	var templatePage = getFirstTemplatePage()
	var pages = doc.pages()
	print(templatePage)
	print(pages)
    pages.removeObject(templatePage)
}

// TODO: Show save dialog
function finish() {
	doc.showMessage( "All done!" );
}

function getFirstArtboard() {
	return doc.currentPage().artboards().firstObject()
}

function setTextOnChildLayerByName(group, name, text) {
    var layer = getChildLayerByName( group, name )
    if ( layer ) {
        layer.setStringValue( text )
        layer.adjustFrameToFit()
    }
}

function getChildLayerByName(group, name) {
    var layers = group.layers()
    var layerLoop = layers.array().objectEnumerator()

    while (childLayer = layerLoop.nextObject()) {
        if( childLayer.name() == name) {
            return childLayer
        }
    }

    doc.showMessage( "No layer called " + name + " found" )
    return false;
}
